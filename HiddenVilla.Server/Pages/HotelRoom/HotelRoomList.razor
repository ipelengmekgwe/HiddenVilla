@page "/hotel-room"
@inject IHotelRoomRepository _hotelRoomRepository
@inject IJSRuntime _jSRuntime
@inject IFileUpload _fileUpload
@inject NavigationManager _navigationManager
@attribute [Authorize(Roles = Common.SD.RoleAdmin)]

<div class="row mt-4">
    <div class="col-8">
        <h4 class="card-title text-info">Hotel Room's</h4>
    </div>
    <div class="col-3 offset-1">
        <NavLink href="/hotel-room/create" class="btn btn-info form-control">Add New Room</NavLink>
    </div>
</div>

<div class="row mt-4">
    <div class="col-12">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Occupancy</th>
                    <th>Rate</th>
                    <th>Sq Ft</th>
                    <th>

                    </th>
                </tr>
            </thead>
            <tbody>
                @if (HotelRooms.Any())
                {
                    foreach (var room in HotelRooms)
                    {
                        <tr>
                            <td>@room.Name</td>
                            <td>@room.Occupancy</td>
                            <td>@room.RegularRate.ToString("C", FormatProvider)</td>
                            <td>@room.SqFt</td>
                            <td>
                                <NavLink href="@($"hotel-room/edit/{room.Id}")" class="btn btn-primary">Edit</NavLink>
                                <button class="btn btn-danger" @onclick="() => HandleDelete(room.Id)">Delete</button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="5">No records found</td>
                    </tr>
                }

            </tbody>
        </table>
    </div>
</div>

<DeleteConfirmation IsParentComponentProcessing="IsProcessing" ConfirmationChanged="ConfirmDelete_Click" />

@code {
    private IEnumerable<HotelRoomDto> HotelRooms { get; set; } = new List<HotelRoomDto>();
    private int? DeleteRoomId { get; set; } = null;
    private bool IsProcessing { get; set; } = false;
    private IFormatProvider FormatProvider = new System.Globalization.CultureInfo("en-ZA")
    {
        NumberFormat =
        {
            CurrencySymbol = new System.Globalization.RegionInfo("en-ZA").ISOCurrencySymbol,
            CurrencyPositivePattern = 2
        }
    };

    protected override async Task OnInitializedAsync()
    {
        HotelRooms = await _hotelRoomRepository.GetAllHotelRooms();
    }

    private async Task HandleDelete(int roomId)
    {
        DeleteRoomId = roomId;
        await _jSRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;

        if (isConfirmed && DeleteRoomId != null)
        {
            HotelRoomDto hotelRoom = await _hotelRoomRepository.GetHotelRoom(DeleteRoomId.Value);
            foreach (var image in hotelRoom.HotelRoomImages)
            {
                var imageName = image.RoomImageUrl.Replace($"{_navigationManager.BaseUri}RoomImages/", "");
                _fileUpload.DeleteFile(imageName);
            }

            await _hotelRoomRepository.DeleteHotelRoom(DeleteRoomId.Value);
            await _jSRuntime.ToastrSuccess("Hotel Room Deleted successfully");
            HotelRooms = await _hotelRoomRepository.GetAllHotelRooms();
        }

        await _jSRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");

        IsProcessing = false;
    }
}
